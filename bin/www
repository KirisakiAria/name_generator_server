const cluster = require('cluster')
const numCPUs = require('os').cpus().length
const path = require('path')
const fs = require('fs')
const https = require('https')
const mongoose = require('mongoose')
const app = require('../app')
const config = require('../config/config')

const sslify = require('koa-sslify').default
app.use(sslify())

const options = {
  key: fs.readFileSync(path.resolve(__dirname, '../ssl/server.key')),
  cert: fs.readFileSync(path.resolve(__dirname, '../ssl/server.crt')),
}

if (cluster.isMaster) {
  console.log(`主进程 ${process.pid} 正在运行`)

  // 衍生工作进程。
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork()
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`工作进程 ${worker.process.pid} 已退出`)
  })
} else {
  // 工作进程可以共享任何 TCP 连接。
  // 在本例子中，共享的是 HTTP 服务器。
  mongoose
    .connect(config.db, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(
      () => {
        console.log('数据库连接成功，端口为27017')
      },
      err => {
        console.log(`数据库连接失败！错误：${err}`.red)
      },
    )
  const httpsServer = https.createServer(options, app.callback())
  httpsServer.listen(config.port, () => {
    console.log(`服务器运行在${config.port}端口`)
  })

  console.log(`工作进程 ${process.pid} 已启动`)
}
